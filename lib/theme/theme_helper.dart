import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.lightBlue50,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.onPrimary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.black90002,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray700,
          fontSize: 16.fSize,
          fontFamily: 'Rubik',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: Color(0XFF000000),
          fontSize: 13.fSize,
          fontFamily: 'Epilogue',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 12.fSize,
          fontFamily: 'Rubik',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 40.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w900,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black90002,
          fontSize: 32.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 28.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w900,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black90002,
          fontSize: 25.fSize,
          fontFamily: 'Manrope',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: Color(0XFF000000),
          fontSize: 13.fSize,
          fontFamily: 'Epilogue',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.cyan300,
          fontSize: 20.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w900,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 16.fSize,
          fontFamily: 'Rubik',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 14.fSize,
          fontFamily: 'Manrope',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF4545B0),
    primaryContainer: Color(0XFFFFFFFF),
    secondaryContainer: Color(0X334545B0),

    // Error colors
    errorContainer: Color(0X99E6005B),
    onError: Color(0X33CC3064),

    // On colors(text colors)
    onPrimary: Color(0XFF00082E),
    onPrimaryContainer: Color(0X339502AD),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFFFD74D);
  Color get amber400 => Color(0XFFFACC28);

  // Black
  Color get black900 => Color(0XFF000B14);
  Color get black90001 => Color(0XFF000C14);
  Color get black90002 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D8D8);
  Color get blueGray10001 => Color(0XFFCDD0E3);
  Color get blueGray900 => Color(0XFF371B34);

  // Cyan
  Color get cyan300 => Color(0XFF44DAE5);
  Color get cyan50 => Color(0XFFEBFAFB);

  // DeepOrange
  Color get deepOrange300 => Color(0XFFFF7A64);
  Color get deepOrange400 => Color(0XFFFD674E);
  Color get deepOrange80033 => Color(0X33B96C1A);

  // Gray
  Color get gray100 => Color(0XFFF4F3F1);
  Color get gray200 => Color(0XFFEEE8E3);
  Color get gray300 => Color(0XFFDADADA);
  Color get gray400 => Color(0XFFC5C5C5);
  Color get gray50 => Color(0XFFFAFAFA);
  Color get gray500 => Color(0XFF9E9E9E);
  Color get gray50001 => Color(0XFF999EA1);
  Color get gray50019 => Color(0X19A0A0A0);
  Color get gray5001 => Color(0XFFFCFCFC);
  Color get gray5019 => Color(0X19FEFCFA);
  Color get gray700 => Color(0XFF58595B);
  Color get gray70033 => Color(0X335B5B5B);
  Color get gray800 => Color(0XFF3C3C43);
  Color get gray80001 => Color(0XFF534C4C);

  // Grayc
  Color get gray9000c => Color(0X0C000E33);

  // Grayd
  Color get gray9006d => Color(0X6D1E1E1E);

  // Green
  Color get green400 => Color(0XFF5FE85C);
  Color get green50 => Color(0XFFEFEDDD);
  Color get green50033 => Color(0X3346BF43);
  Color get green60033 => Color(0X3346AC44);

  // GreenCc
  Color get green500Cc => Color(0XCC2BBF43);
  Color get green500Cc01 => Color(0XCC3CE24C);

  // Indigo
  Color get indigo500 => Color(0XFF4545BF);
  Color get indigo900 => Color(0XFF24265F);

  // LightBlue
  Color get lightBlue50 => Color(0XFFECFBFC);

  // LightGreenCc
  Color get lightGreen100Cc => Color(0XCCD4FFD8);

  // LightGreen
  Color get lightGreen50 => Color(0XFFEFFDEF);

  // Lime
  Color get lime60033 => Color(0X33D3BB23);
  Color get lime6003301 => Color(0X33CAB52D);

  // Pink
  Color get pink200 => Color(0XFFFF94BF);
  Color get pink800 => Color(0XFFB00147);
  Color get pinkA100 => Color(0XFFFF81AF);
  Color get pinkA200 => Color(0XFFFC4673);
  Color get pinkA20001 => Color(0XFFFC3B81);

  // Purple
  Color get purple100 => Color(0XFFF4B7FF);
  Color get purple10001 => Color(0XFFF3ACFF);
  Color get purpleA200 => Color(0XFFE43EFF);
  Color get purpleA400 => Color(0XFFD91DF8);
  Color get purpleA40001 => Color(0XFFD300F6);

  // Red
  Color get red200 => Color(0XFFFF9CA6);
  Color get red20001 => Color(0XFFFC97A4);
  Color get red300 => Color(0XFFF8676E);
  Color get redA100 => Color(0XFFFB8493);

  // Redc
  Color get red8004c => Color(0X4C9F373A);

  // Teal
  Color get teal40033 => Color(0X332B929A);

  // Yellow
  Color get yellow300 => Color(0XFFFDEB76);
  Color get yellow500 => Color(0XFFFCE23C);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
